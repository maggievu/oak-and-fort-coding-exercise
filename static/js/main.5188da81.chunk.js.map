{"version":3,"sources":["components/MyButton.js","components/Result.js","components/ResultPlaceholder.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","margin","props","react_default","a","createElement","index_es","className","classes","variant","color","onClick","value","buttonName","styles","background","blue","width","height","borderRadius","display","alignContent","quantity","backgroundColor","grey","theme","position","top","left","right","App","state","currentQuantity","buttonClicked","event","_this","setState","currentTarget","_this2","this","src_Header","container","justify","direction","style","marginTop","components_Result","components_ResultPlaceholder","data","map","record","key","components_MyButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAqBeA,uBAlBA,CACdC,KAAM,CACLC,OAAQ,eAgBKF,CAZE,SAACG,GAAD,OAChBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACCC,UAAWL,EAAMM,QAAQR,KACzBS,QAAQ,YACRC,MAAM,YACNC,QAAST,EAAMS,QACfC,MAAOV,EAAMU,OAEZV,EAAMW,8BCbHC,EAAS,CACdd,KAAM,CACLe,WAAYC,OAAK,KACjBN,MAAO,QACPT,OAAQ,cACRgB,MAAO,IACPC,OAAQ,GACRC,aAAc,EACdC,QAAS,OACTC,aAAc,WAUDtB,uBAAWe,EAAXf,CANA,SAACG,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAMM,QAAQR,MAC7BG,EAAAC,EAAAC,cAAA,sBAAcH,EAAMoB,SAApB,cCfIR,EAAS,CACdd,KAAM,CACLuB,gBAAiBC,OAAK,KACtBL,aAAc,EACdF,MAAO,IACPC,OAAQ,GACRjB,OAAQ,gBAQKF,uBAAWe,EAAXf,CAJW,SAACG,GAAD,OACzBC,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAMM,QAAQR,SCGhBD,uBAfA,SAAA0B,GAAK,MAAK,CACxBzB,KAAM,CACLe,WAAY,UACZW,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPX,OAAQ,MAQKnB,CAJA,SAACG,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAMM,QAAQR,SCgChB8B,6MArCdC,MAAQ,CACPC,gBAAiB,KAGlBC,cAAgB,SAACC,GAChBC,EAAKC,SAAS,CACbJ,gBAAiBE,EAAMG,cAAczB,iFAI7B,IAAA0B,EAAAC,KACP,OACDpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAEdJ,EAAAC,EAAAC,cAACmC,EAAD,MAEArC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMmC,WAAS,EAACC,QAAQ,SAASC,UAAU,UAC1CxC,EAAAC,EAAAC,cAAA,KAAGuC,MAAO,CAACC,UAAW,KAAK1C,EAAAC,EAAAC,cAAA,yCACK,IAA/BkC,KAAKR,MAAMC,gBAAwB7B,EAAAC,EAAAC,cAACyC,EAAD,CAAQxB,SAAUiB,KAAKR,MAAMC,kBAAsB7B,EAAAC,EAAAC,cAAC0C,EAAD,OAGxF5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMmC,WAAS,EAACC,QAAQ,SAASnC,UAAU,cACzCyC,EAAKC,IAAI,SAACC,EAAQC,GAClB,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,CACPD,IAAKA,EACLtC,WAAgC,cAApBqC,EAAM,MAA4BA,EAAM,MAAY,UAChEvC,QAAS2B,EAAKL,cACdrB,MAAOsC,EAAM,sBA5BDG,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5188da81.chunk.js","sourcesContent":["import React from 'react'\nimport { withStyles, Button } from '@material-ui/core'\n\nconst styles = {\n\troot: {\n\t\tmargin: '.5rem 1rem',\n\t},\n}\n\nconst MyButton = (props) => (\n\t<Button\n\t\tclassName={props.classes.root}\n\t\tvariant=\"contained\"\n\t\tcolor=\"secondary\"\n\t\tonClick={props.onClick}\n\t\tvalue={props.value}\n\t>\n\t\t{props.buttonName}\n\t</Button>\n)\n\nexport default withStyles(styles)(MyButton)","import React from 'react'\nimport { withStyles } from '@material-ui/core'\nimport { blue } from '@material-ui/core/colors'\n\nconst styles = {\n\troot: {\n\t\tbackground: blue[500],\n\t\tcolor: 'white',\n\t\tmargin: '0 auto 2rem',\n\t\twidth: 300,\n\t\theight: 50,\n\t\tborderRadius: 5,\n\t\tdisplay: 'grid',\n\t\talignContent: 'center',\n\t}\n}\n\nconst Result = (props) => (\n\t<div className={props.classes.root}>\n\t\t<p>There are {props.quantity} items.</p>\n\t</div>\n)\n\nexport default withStyles(styles)(Result)","import React from 'react'\nimport { withStyles } from '@material-ui/core'\nimport { grey } from '@material-ui/core/colors';\n\nconst styles = {\n\troot: {\n\t\tbackgroundColor: grey[200],\n\t\tborderRadius: 5,\n\t\twidth: 300,\n\t\theight: 50,\n\t\tmargin: '0 auto 2rem',\n\t}\n}\n\nconst ResultPlaceholder = (props) => (\n\t<div className={props.classes.root}></div>\n)\n\nexport default withStyles(styles)(ResultPlaceholder)","import React from 'react'\nimport { withStyles } from '@material-ui/core'\n\nconst styles = theme => ({\n\troot: {\n\t\tbackground: '#e91e63',\n\t\tposition: 'absolute',\n\t\ttop: 0,\n\t\tleft: 0,\n\t\tright: 0,\n\t\theight: 10,\n\t},\n})\n\nconst Header = (props) => (\n\t<div className={props.classes.root}></div>\n)\n\nexport default withStyles(styles)(Header)","import React, { Component } from 'react'\nimport './App.css'\nimport MyButton from './components/MyButton'\nimport data from './data/dataset.json'\nimport { Grid } from '@material-ui/core'\nimport Result from './components/Result'\nimport ResultPlaceholder from './components/ResultPlaceholder'\nimport Header from './Header'\n\nclass App extends Component {\n\tstate = {\n\t\tcurrentQuantity: 0,\n\t}\n\n\tbuttonClicked = (event) => {\n\t\tthis.setState({\n\t\t\tcurrentQuantity: event.currentTarget.value\n\t\t})\n\t}\n\n  render() {\n    return (\n\t\t\t<div className=\"App\">\n\n\t\t\t\t<Header />\n\n\t\t\t\t<Grid container justify='center' direction='column'>\n\t\t\t\t\t<p style={{marginTop: 30}}><strong>Please choose a class!</strong></p>\n\t\t\t\t\t{this.state.currentQuantity !== 0 ? <Result quantity={this.state.currentQuantity} /> : <ResultPlaceholder />}\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid container justify='center' className='scrollable'>\n\t\t\t\t\t{data.map((record, key) => {\n\t\t\t\t\t\treturn <MyButton\n\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\tbuttonName={record['class'] !== 'undefined' ? record['class'] : 'missing'}\n\t\t\t\t\t\tonClick={this.buttonClicked}\n\t\t\t\t\t\tvalue={record['quantity']}\n\t\t\t\t\t\t/>\n\t\t\t\t\t})}\n\t\t\t\t</Grid>\n\n\t\t\t</div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}